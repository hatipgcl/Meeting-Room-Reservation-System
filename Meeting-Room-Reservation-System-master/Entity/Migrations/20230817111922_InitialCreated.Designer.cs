// <auto-generated />
using System;
using Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(MeetingWebContext))]
    [Migration("20230817111922_InitialCreated")]
    partial class InitialCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdateDate")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Stafftitle", b =>
                {
                    b.Property<int>("StafftitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StafftitleId"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<string>("StafftitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("StafftitleId");

                    b.ToTable("Stafftitles");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StafftitleId")
                        .HasColumnType("int")
                        .HasColumnName("StafftitleID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StafftitleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entity.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Entity.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("RoomCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entity.LocationToRoom", b =>
                {
                    b.Property<int>("LocationToRoomsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationToRoomsId"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("LocationToRoomsId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationToRooms");
                });

            modelBuilder.Entity("Entity.MeetingEquipment", b =>
                {
                    b.Property<int>("MeetingEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingEquipmentId"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<int>("MeetingRequestId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingRequestID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("MeetingEquipmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MeetingRequestId");

                    b.ToTable("MeetingEquipments");
                });

            modelBuilder.Entity("Entity.MeetingRequest", b =>
                {
                    b.Property<int>("MeetingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingRequestId"));

                    b.Property<int>("AttendeeCount")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("MeetingRequestId");

                    b.ToTable("MeetingRequest", (string)null);
                });

            modelBuilder.Entity("Entity.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<short>("Capasity")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Entity.RoomToEquipment", b =>
                {
                    b.Property<int>("RoomToEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomToEquipmentId"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int")
                        .HasColumnName("InsertUserID");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdateUserID");

                    b.HasKey("RoomToEquipmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomToEquipments");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Users_Genders");

                    b.HasOne("Core.Entities.Concrete.Stafftitle", "Stafftitle")
                        .WithMany("Users")
                        .HasForeignKey("StafftitleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Stafftitles");

                    b.Navigation("Gender");

                    b.Navigation("Stafftitle");
                });

            modelBuilder.Entity("Entity.LocationToRoom", b =>
                {
                    b.HasOne("Entity.Location", "Location")
                        .WithMany("LocationToRooms")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationToRooms_Locations");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entity.MeetingEquipment", b =>
                {
                    b.HasOne("Entity.Equipment", "Equipment")
                        .WithMany("MeetingEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingEquipments_Equipments");

                    b.HasOne("Entity.MeetingRequest", "MeetingRequest")
                        .WithMany("MeetingEquipments")
                        .HasForeignKey("MeetingRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingEquipments_MeetingRequest");

                    b.Navigation("Equipment");

                    b.Navigation("MeetingRequest");
                });

            modelBuilder.Entity("Entity.RoomToEquipment", b =>
                {
                    b.HasOne("Entity.Equipment", "Equipment")
                        .WithMany("RoomToEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomToEquipments_Equipments");

                    b.HasOne("Entity.Room", "Room")
                        .WithMany("RoomToEquipments")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomToEquipments_Rooms");

                    b.Navigation("Equipment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Stafftitle", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.Equipment", b =>
                {
                    b.Navigation("MeetingEquipments");

                    b.Navigation("RoomToEquipments");
                });

            modelBuilder.Entity("Entity.Location", b =>
                {
                    b.Navigation("LocationToRooms");
                });

            modelBuilder.Entity("Entity.MeetingRequest", b =>
                {
                    b.Navigation("MeetingEquipments");
                });

            modelBuilder.Entity("Entity.Room", b =>
                {
                    b.Navigation("RoomToEquipments");
                });
#pragma warning restore 612, 618
        }
    }
}
